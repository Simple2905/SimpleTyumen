// netlify/functions/sendorder.js
const rub = (n) => (Number.isNaN(n) ? '' : new Intl.NumberFormat('ru-RU').format(n) + ' ‚ÇΩ');
const parsePrice = (s) => Number((s || '').replace(/[^\d.,]/g, '').replace(',', '.')) || NaN;
const esc = (s) => String(s ?? '').replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
const line = (label, value) => (value ? `<b>${label}:</b> ${esc(value)}\n` : '');

function parseBody(event) {
  const raw = event.body || '';
  const ct = (event.headers?.['content-type'] || event.headers?.['Content-Type'] || '').toLowerCase();

  // Netlify –∏–Ω–æ–≥–¥–∞ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç base64 –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ö
  const decoded = event.isBase64Encoded ? Buffer.from(raw, 'base64').toString('utf8') : raw;

  // JSON
  if (ct.includes('application/json')) {
    try { return JSON.parse(decoded || '{}'); } catch (_) { /* fallthrough */ }
  }

  // form-urlencoded
  if (ct.includes('application/x-www-form-urlencoded')) {
    const obj = {};
    decoded.split('&').forEach(pair => {
      const [k, v] = pair.split('=');
      if (!k) return;
      obj[decodeURIComponent(k)] = decodeURIComponent((v || '').replace(/\+/g, ' '));
    });
    return obj;
  }

  // –ü–æ–ø—ã—Ç–∫–∞ –∫–∞–∫ JSON –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
  try { return JSON.parse(decoded || '{}'); } catch (_) { /* –ø—É—Å—Ç–æ */ }
  return {};
}

exports.handler = async (event) => {
  try {
    if (event.httpMethod !== 'POST') {
      return { statusCode: 405, body: 'Method Not Allowed' };
    }

    const token  = process.env.TELEGRAM_BOT_TOKEN || process.env.BOT_TOKEN;
    const chatId = process.env.CHAT_ID_POLEVAYA || process.env.CHAT_ID_DEFAULT;
    if (!token || !chatId) {
      return { statusCode: 500, body: JSON.stringify({ ok:false, error:'Missing TELEGRAM envs' }) };
    }

    const data = parseBody(event);

    // ---- –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è ----
    const name     = data.name?.trim();
    const phone    = data.phone?.trim();
    const address  = data.address?.trim();
    const comment  = data.comment?.trim();
    const source   = (data.source || '–ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ').trim();
    const placedAt = data.time ? new Date(data.time) : new Date();
    const orderId  = (data.orderId || Math.random().toString(36).slice(2, 8)).toUpperCase();

    // ---- –¢–æ–≤–∞—Ä—ã ----
    let lines = [];
    let total = 0;

    // –æ–¥–∏–Ω–æ—á–Ω—ã–π —Ç–æ–≤–∞—Ä
    if (data.product && (data.product.name || data.product.price)) {
      const qty = Number(data.product.qty || 1);
      const pn  = parsePrice(data.product.price || '');
      const sum = Number.isNaN(pn) ? NaN : pn * qty;
      if (!Number.isNaN(sum)) total += sum;
      lines.push(`‚Ä¢ ${esc(data.product.name || '–¢–æ–≤–∞—Ä')} ‚Äî ${esc(data.product.price || '')}${qty > 1 ? ` √ó ${qty} = <b>${rub(sum)}</b>` : ''}`);
    }

    // –∫–æ—Ä–∑–∏–Ω–∞
    if (Array.isArray(data.items)) {
      for (const it of data.items) {
        if (!it) continue;
        const q = Number(it.qty || 1);
        const pn = parsePrice(it.price || '');
        const sum = Number.isNaN(pn) ? NaN : pn * q;
        if (!Number.isNaN(sum)) total += sum;
        lines.push(`‚Ä¢ ${esc(it.name || '–¢–æ–≤–∞—Ä')} ‚Äî ${esc(it.price || '')}${q > 1 ? ` √ó ${q} = <b>${rub(sum)}</b>` : ''}`);
      }
    }

    const itemsBlock = lines.length ? `<b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>\n${lines.join('\n')}\n` : '';
    const totalBlock = total > 0 ? `<b>–ò—Ç–æ–≥–æ:</b> ${rub(total)}\n` : '';

    // ---- –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –ø–æ–∫–∞–∂–µ–º –∫–∞–∫–∏–µ –ø–æ–ª—è —Ä–µ–∞–ª—å–Ω–æ –ø—Ä–∏—à–ª–∏ ----
    const missing = [];
    if (!name)    missing.push('name');
    if (!phone)   missing.push('phone');
    if (!address) missing.push('address'); // –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø—Ü.
    if (!comment) /* –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ */ null;
    if (!lines.length) missing.push('product/items');

    const diag = missing.length ? `\n‚ö†Ô∏è <i>–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è:</i> ${missing.join(', ')}\n` : '';

    // ---- –°–æ–æ–±—â–µ–Ω–∏–µ ----
    const text =
`üßæ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b>
<b>‚Ññ</b> ${orderId}
<b>–í—Ä–µ–º—è:</b> ${esc(placedAt.toLocaleString('ru-RU'))}
${itemsBlock}${totalBlock}${line('–ò–º—è', name)}${line('–¢–µ–ª–µ—Ñ–æ–Ω', phone)}${line('–ê–¥—Ä–µ—Å', address)}${line('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', comment)}${line('–ò—Å—Ç–æ—á–Ω–∏–∫', source)}${diag}`;

    // –ö–Ω–æ–ø–∫–∞ "–ü–æ–∑–≤–æ–Ω–∏—Ç—å" –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω
    const reply_markup = phone ? {
      inline_keyboard: [
        [{ text: `–ü–æ–∑–≤–æ–Ω–∏—Ç—å: ${phone}`, url: `tel:${phone.replace(/[^\d+]/g,'')}` }]
      ]
    } : undefined;

    const tgResp = await fetch(`https://api.telegram.org/bot${token}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        text,
        parse_mode: 'HTML',
        disable_web_page_preview: true,
        reply_markup
      }),
    });
    const tgJson = await tgResp.json();

    return {
      statusCode: 200,
      headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' },
      body: JSON.stringify({ ok: true, telegram: tgJson, received: data }),
    };
  } catch (e) {
    return { statusCode: 500, body: JSON.stringify({ ok:false, error: e.message }) };
  }
};
