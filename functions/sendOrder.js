// functions/sendOrder.js
exports.handler = async (event) => {
  try {
    if (event.httpMethod !== 'POST') {
      return { statusCode: 405, body: 'Method Not Allowed' };
    }

    const token = process.env.TELEGRAM_BOT_TOKEN || process.env.BOT_TOKEN;
    const chatId = process.env.CHAT_ID_POLEVAYA || process.env.CHAT_ID_DEFAULT;

    if (!token || !chatId) {
      return { statusCode: 500, body: JSON.stringify({ ok: false, error: 'Missing TELEGRAM envs' }) };
    }

    const data = JSON.parse(event.body || '{}');

    // –°–æ–±–µ—Ä–∏ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const lines = [
      'üßæ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑*',
      data.product ? `–¢–æ–≤–∞—Ä: ${data.product.name} ‚Äî ${data.product.price}` : null,
      data.name ? `–ò–º—è: ${data.name}` : null,
      data.phone ? `–¢–µ–ª–µ—Ñ–æ–Ω: ${data.phone}` : null,
      data.comment ? `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${data.comment}` : null,
      data.address ? `–ê–¥—Ä–µ—Å: ${data.address}` : null,
      data.source ? `–ò—Å—Ç–æ—á–Ω–∏–∫: ${data.source}` : '–ò—Å—Ç–æ—á–Ω–∏–∫: –ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
    ].filter(Boolean);

    const text = lines.join('\n');

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram (Node 18+ ‚Äî –≥–ª–æ–±–∞–ª—å–Ω—ã–π fetch –µ—Å—Ç—å —É Netlify)
    const tgResp = await fetch(`https://api.telegram.org/bot${token}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        text,
        parse_mode: 'Markdown',
        disable_web_page_preview: true,
      }),
    });

    const tgJson = await tgResp.json();

    return {
      statusCode: 200,
      headers: {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*',
      },
      body: JSON.stringify({ ok: true, telegram: tgJson }),
    };
  } catch (err) {
    return {
      statusCode: 500,
      body: JSON.stringify({ ok: false, error: err.message }),
    };
  }
};
